plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
    // id 'com.modrinth.minotaur' version '2.+'
    // id 'curseforge.gradle' version '1.0.+'   // optional upload plugins
}

group = 'net.lee'                // your package root (adjust as you like)
version = project.findProperty('mod_version') ?: '1.0.0'
archivesBaseName = 'fnafmod'     // jar base name

java {
    // Require Java 17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    // (Optional) also pin source/target
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net' }
}

minecraft {
    // Mojang official mappings for Forge
    mappings channel: (project.findProperty('mappings_channel') ?: 'official'),
            version: (project.findProperty('mappings_version') ?: '1.20.1')

    runs {
        client {
            workingDirectory project.file('run')
            // put your main mod class here if you want logs to highlight it
            // property 'forge.logging.markers', 'REGISTRIES'
            // property 'forge.logging.console.level', 'debug'
            args '--username', 'Dev'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.findProperty('minecraft_version') ?: '1.20.1'}-${project.findProperty('forge_version') ?: '47.4.10'}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // Ensures 17 bytecode even if IDE uses newer JDK
    options.release = 17
}

tasks.named('processResources', ProcessResources).configure {
    // Expand tokens in mods.toml and pack.mcmeta
    inputs.property 'version', version
    inputs.property 'modid', 'fnafmod'

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand([
                version: version,
                modid  : 'fnafmod'
        ])
    }
}

tasks.named('jar', Jar).configure {
    from('LICENSE') { rename { "${it}_${archivesBaseName}" } ; into('META-INF') }
    manifest {
        attributes(
                'Specification-Title'   : 'FNAF Jumpscare Mod',
                'Specification-Vendor'  : 'Lee',
                'Specification-Version' : '1',
                'Implementation-Title'  : archivesBaseName,
                'Implementation-Version': version,
                'Implementation-Vendor' : 'Lee',
                'Built-By'              : 'Gradle'
        )
    }
}

/* -----------------------------
   CHANGELOG RELEASE TASK
   Moves ## [Unreleased] to a versioned section with today’s date.
   Usage:
     ./gradlew releaseChangelog -PversionName=1.0.1
------------------------------*/
import java.time.LocalDate
import java.time.format.DateTimeFormatter

ext.readProp = { String key ->
    if (project.hasProperty(key)) return project.property(key).toString()
    def props = new Properties()
    def f = file('gradle.properties')
    if (f.exists()) f.withInputStream { props.load(it) }
    return props.getProperty(key, '')
}

tasks.register('releaseChangelog') {
    group = 'release'
    description = 'Move Unreleased changelog entries into a versioned section.'
    doLast {
        def changelogFile = file('CHANGELOG.md')
        if (!changelogFile.exists()) throw new GradleException('CHANGELOG.md not found')

        def versionName = readProp('versionName')
        if (!versionName) versionName = readProp('mod_version')
        if (!versionName || versionName == 'unspecified') versionName = project.version.toString()
        if (!versionName || versionName == 'unspecified')
            throw new GradleException('No version provided. Pass -PversionName=1.0.1 or set mod_version.')

        def today = LocalDate.now().format(DateTimeFormatter.ISO_DATE)
        def content = changelogFile.getText('UTF-8')

        def unreleasedHeader = ~/^## \[Unreleased\]\s*$/m
        def headers = ~/^## (?:\[Unreleased\]|[0-9]+\.[0-9]+\.[0-9]+.*?)$/m

        def m = unreleasedHeader.matcher(content)
        if (!m.find()) throw new GradleException("Could not find '## [Unreleased]' in CHANGELOG.md")

        def start = m.end()
        def next = headers.matcher(content)
        int end = content.length()
        while (next.find()) {
            if (next.start() > start) { end = next.start(); break }
        }

        def body = content.substring(start, end).trim()
        if (body.isEmpty()) { println 'No unreleased changes — nothing to release.'; return }

        def newSection = """\
## ${versionName} – ${today}
${body}

""".stripIndent()

        def newContent = new StringBuilder()
        newContent.append(content.substring(0, start))
        newContent.append('\n- (no changes yet)\n\n')
        newContent.append(content.substring(end))

        def insertAt = newContent.indexOf('\n', start) + 1
        newContent.insert(insertAt, newSection)

        changelogFile.write(newContent.toString(), 'UTF-8')
        println "✅ CHANGELOG.md updated for version ${versionName} (${today})"
    }
}
